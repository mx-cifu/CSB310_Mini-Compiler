Index: src/main/java/Parser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\nclass Parser {\n    private List<Token> source;\n    private Token token;\n    private int position;\n\n    static class Node {\n        public NodeType nt;\n        public Node left, right;\n        public String value;\n\n        Node() {\n            this.nt = null;\n            this.left = null;\n            this.right = null;\n            this.value = null;\n        }\n        Node(NodeType node_type, Node left, Node right, String value) {\n            this.nt = node_type;\n            this.left = left;\n            this.right = right;\n            this.value = value;\n        }\n        public static Node make_node(NodeType nodetype, Node left, Node right) {\n            return new Node(nodetype, left, right, \"\");\n        }\n        public static Node make_node(NodeType nodetype, Node left) {\n            return new Node(nodetype, left, null, \"\");\n        }\n        public static Node make_leaf(NodeType nodetype, String value) {\n            return new Node(nodetype, null, null, value);\n        }\n    }\n\n    static class Token {\n        public TokenType tokentype;\n        public String value;\n        public int line;\n        public int pos;\n\n        Token(TokenType token, String value, int line, int pos) {\n            this.tokentype = token; this.value = value; this.line = line; this.pos = pos;\n        }\n        @Override\n        public String toString() {\n            return String.format(\"%5d  %5d %-15s %s\", this.line, this.pos, this.tokentype, this.value);\n        }\n    }\n\n    static enum TokenType {\n        End_of_input(false, false, false, -1, NodeType.nd_None),\n        Op_multiply(false, true, false, 13, NodeType.nd_Mul),\n        Op_divide(false, true, false, 13, NodeType.nd_Div),\n        Op_mod(false, true, false, 13, NodeType.nd_Mod),\n        Op_add(false, true, false, 12, NodeType.nd_Add),\n        Op_subtract(false, true, false, 12, NodeType.nd_Sub),\n        Op_negate(false, false, true, 14, NodeType.nd_Negate),\n        Op_not(false, false, true, 14, NodeType.nd_Not),\n        Op_less(false, true, false, 10, NodeType.nd_Lss),\n        Op_lessequal(false, true, false, 10, NodeType.nd_Leq),\n        Op_greater(false, true, false, 10, NodeType.nd_Gtr),\n        Op_greaterequal(false, true, false, 10, NodeType.nd_Geq),\n        Op_equal(false, true, true, 9, NodeType.nd_Eql),\n        Op_notequal(false, true, false, 9, NodeType.nd_Neq),\n        Op_assign(false, false, false, -1, NodeType.nd_Assign),\n        Op_and(false, true, false, 5, NodeType.nd_And),\n        Op_or(false, true, false, 4, NodeType.nd_Or),\n        Keyword_if(false, false, false, -1, NodeType.nd_If),\n        Keyword_else(false, false, false, -1, NodeType.nd_None),\n        Keyword_while(false, false, false, -1, NodeType.nd_While),\n        Keyword_print(false, false, false, -1, NodeType.nd_None),\n        Keyword_putc(false, false, false, -1, NodeType.nd_None),\n        LeftParen(false, false, false, -1, NodeType.nd_None),\n        RightParen(false, false, false, -1, NodeType.nd_None),\n        LeftBrace(false, false, false, -1, NodeType.nd_None),\n        RightBrace(false, false, false, -1, NodeType.nd_None),\n        Semicolon(false, false, false, -1, NodeType.nd_None),\n        Comma(false, false, false, -1, NodeType.nd_None),\n        Identifier(false, false, false, -1, NodeType.nd_Ident),\n        Integer(false, false, false, -1, NodeType.nd_Integer),\n        String(false, false, false, -1, NodeType.nd_String);\n\n        private final int precedence;\n        private final boolean right_assoc;\n        private final boolean is_binary;\n        private final boolean is_unary;\n        private final NodeType node_type;\n\n        TokenType(boolean right_assoc, boolean is_binary, boolean is_unary, int precedence, NodeType node) {\n            this.right_assoc = right_assoc;\n            this.is_binary = is_binary;\n            this.is_unary = is_unary;\n            this.precedence = precedence;\n            this.node_type = node;\n        }\n        boolean isRightAssoc() { return this.right_assoc; }\n        boolean isBinary() { return this.is_binary; }\n        boolean isUnary() { return this.is_unary; }\n        int getPrecedence() { return this.precedence; }\n        NodeType getNodeType() { return this.node_type; }\n    }\n    static enum NodeType {\n        nd_None(\"\"), nd_Ident(\"Identifier\"), nd_String(\"String\"), nd_Integer(\"Integer\"), nd_Sequence(\"Sequence\"), nd_If(\"If\"),\n        nd_Prtc(\"Prtc\"), nd_Prts(\"Prts\"), nd_Prti(\"Prti\"), nd_While(\"While\"),\n        nd_Assign(\"Assign\"), nd_Negate(\"Negate\"), nd_Not(\"Not\"), nd_Mul(\"Multiply\"), nd_Div(\"Divide\"), nd_Mod(\"Mod\"), nd_Add(\"Add\"),\n        nd_Sub(\"Subtract\"), nd_Lss(\"Less\"), nd_Leq(\"LessEqual\"),\n        nd_Gtr(\"Greater\"), nd_Geq(\"GreaterEqual\"), nd_Eql(\"Equal\"), nd_Neq(\"NotEqual\"), nd_And(\"And\"), nd_Or(\"Or\");\n\n        private final String name;\n\n        NodeType(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() { return this.name; }\n    }\n    static void error(int line, int pos, String msg) {\n        if (line > 0 && pos > 0) {\n            System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos);\n        } else {\n            System.out.println(msg);\n        }\n        System.exit(1);\n    }\n    Parser(List<Token> source) {\n        this.source = source;\n        this.token = null;\n        this.position = 0;\n    }\n    Token getNextToken() {\n        this.token = this.source.get(this.position++);\n        return this.token;\n    }\n    Node expr(int p) {\n        // create nodes for token types such as LeftParen, Op_add, Op_subtract, etc.\n        // be very careful here and be aware of the precendence rules for the AST tree\n        Node result = null, node;\n\n        return result;\n    }\n    Node paren_expr() {\n        expect(\"paren_expr\", TokenType.LeftParen);\n        Node node = expr(0);\n        expect(\"paren_expr\", TokenType.RightParen);\n        return node;\n    }\n    void expect(String msg, TokenType s) {\n        if (this.token.tokentype == s) {\n            getNextToken();\n            return;\n        }\n        error(this.token.line, this.token.pos, msg + \": Expecting '\" + s + \"', found: '\" + this.token.tokentype + \"'\");\n    }\n    Node stmt() {\n        // this one handles TokenTypes such as Keyword_if, Keyword_else, nd_If, Keyword_print, etc.\n        // also handles while, end of file, braces\n        Node s, s2, t = null, e, v;\n\n        return t;\n    }\n    Node parse() {\n        Node t = null;\n        getNextToken();\n        while (this.token.tokentype != TokenType.End_of_input) {\n            t = Node.make_node(NodeType.nd_Sequence, t, stmt());\n        }\n        return t;\n    }\n    String printAST(Node t, StringBuilder sb) {\n        int i = 0;\n        if (t == null) {\n            sb.append(\";\");\n            sb.append(\"\\n\");\n            System.out.println(\";\");\n        } else {\n            sb.append(t.nt);\n            System.out.printf(\"%-14s\", t.nt);\n            if (t.nt == NodeType.nd_Ident || t.nt == NodeType.nd_Integer || t.nt == NodeType.nd_String) {\n                sb.append(\" \" + t.value);\n                sb.append(\"\\n\");\n                System.out.println(\" \" + t.value);\n            } else {\n                sb.append(\"\\n\");\n                System.out.println();\n                printAST(t.left, sb);\n                printAST(t.right, sb);\n            }\n\n        }\n        return sb.toString();\n    }\n\n    static void outputToFile(String result) {\n        try {\n            FileWriter myWriter = new FileWriter(\"src/main/resources/hello.par\");\n            myWriter.write(result);\n            myWriter.close();\n            System.out.println(\"Successfully wrote to the file.\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    public static void main(String[] args) {\n        if (1==1) {\n            try {\n                String value, token;\n                String result = \" \";\n                StringBuilder sb = new StringBuilder();\n                int line, pos;\n                Token t;\n                boolean found;\n                List<Token> list = new ArrayList<>();\n                Map<String, TokenType> str_to_tokens = new HashMap<>();\n\n\n                str_to_tokens.put(\"End_of_input\", TokenType.End_of_input);\n                // finish creating your Hashmap. I left one as a model\n\n                Scanner s = new Scanner(new File(\"src/main/resources/hello.lex\"));\n                String source = \" \";\n                while (s.hasNext()) {\n                    String str = s.nextLine();\n                    StringTokenizer st = new StringTokenizer(str);\n                    line = Integer.parseInt(st.nextToken());\n                    pos = Integer.parseInt(st.nextToken());\n                    token = st.nextToken();\n                    value = \"\";\n                    while (st.hasMoreTokens()) {\n                        value += st.nextToken() + \" \";\n                    }\n                    found = false;\n                    if (str_to_tokens.containsKey(token)) {\n                        found = true;\n                        list.add(new Token(str_to_tokens.get(token), value, line, pos));\n                    }\n                    if (found == false) {\n                        throw new Exception(\"Token not found: '\" + token + \"'\");\n                    }\n                }\n                Parser p = new Parser(list);\n                result = p.printAST(p.parse(), sb);\n                outputToFile(result);\n            } catch (FileNotFoundException e) {\n                error(-1, -1, \"Exception: \" + e.getMessage());\n            } catch (Exception e) {\n                error(-1, -1, \"Exception: \" + e.getMessage());\n            }\n        } else {\n            error(-1, -1, \"No args\");\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Parser.java b/src/main/java/Parser.java
--- a/src/main/java/Parser.java	(revision 07e3666239ca971a7fee496b8a4da803abaf4232)
+++ b/src/main/java/Parser.java	(date 1716252052558)
@@ -166,7 +166,6 @@
         // this one handles TokenTypes such as Keyword_if, Keyword_else, nd_If, Keyword_print, etc.
         // also handles while, end of file, braces
         Node s, s2, t = null, e, v;
-
         return t;
     }
     Node parse() {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"a7ac25b6-265d-43ed-8230-0c6749f7127e\" name=\"Changes\" comment=\"New commit with added getNextToken() code\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/prime.c\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/prime.c\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExternalProjectsData\">\n    <projectState path=\"$PROJECT_DIR$\">\n      <ProjectState />\n    </projectState>\n  </component>\n  <component name=\"ExternalProjectsManager\">\n    <system id=\"GRADLE\">\n      <state>\n        <projects_view>\n          <tree_state>\n            <expand>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"MiniCompiler\" type=\"f1a62948:ProjectNode\" />\n              </path>\n            </expand>\n            <select />\n          </tree_state>\n        </projects_view>\n      </state>\n    </system>\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JUnit5 Test Class\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2MfWaxIGvCC8fsmB46pvouU9vkq\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\": \"JUnit5\",\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5\": \"\",\n    \"last_opened_file_path\": \"/Users/elloyd/Desktop/NSC/Courses/Spring Courses/Programming Languages/Projects/MiniCompilerProject/src/main/resources\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"settings.editor.selected.configurable\": \"editor.preferences.fonts.default\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n    </key>\n    <key name=\"CreateTestDialog.Recents.Supers\">\n      <recent name=\"\" />\n    </key>\n    <key name=\"CreateTestDialog.RecentsKey\">\n      <recent name=\"\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Lexer\">\n    <configuration name=\"Lexer\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Lexer\" />\n      <module name=\"MiniCompiler.main\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Parser\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Parser\" />\n      <module name=\"MiniCompiler.main\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Parser\" />\n        <item itemvalue=\"Application.Lexer\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"a7ac25b6-265d-43ed-8230-0c6749f7127e\" name=\"Changes\" comment=\"\" />\n      <created>1678159185811</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1678159185811</updated>\n      <workItem from=\"1682634037926\" duration=\"218000\" />\n      <workItem from=\"1683141564295\" duration=\"383000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Initial commit, incomplete solution\">\n      <created>1678238319702</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678238319702</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"New commit with added getNextToken() code\">\n      <created>1682631009218</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1682631009218</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Initial commit, incomplete solution\" />\n    <MESSAGE value=\"New commit with added getNextToken() code\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"New commit with added getNextToken() code\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <pin-to-top-manager>\n      <pinned-members>\n        <PinnedItemInfo parentTag=\"Lexer\" memberName=\"position\" />\n      </pinned-members>\n    </pin-to-top-manager>\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 07e3666239ca971a7fee496b8a4da803abaf4232)
+++ b/.idea/workspace.xml	(date 1715055759690)
@@ -6,7 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="a7ac25b6-265d-43ed-8230-0c6749f7127e" name="Changes" comment="New commit with added getNextToken() code">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/prime.c" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/prime.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -57,11 +57,13 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "WebServerToolWindowFactoryState": "false",
     "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
     "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
-    "last_opened_file_path": "/Users/elloyd/Desktop/NSC/Courses/Spring Courses/Programming Languages/Projects/MiniCompilerProject/src/main/resources",
+    "git-widget-placeholder": "partial-parser",
+    "last_opened_file_path": "/Users/mx.cifu/Desktop/CSB310_Mini-Compiler",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -84,7 +86,7 @@
       <recent name="" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.Lexer">
+  <component name="RunManager" selected="Application.Parser">
     <configuration name="Lexer" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Lexer" />
       <module name="MiniCompiler.main" />
@@ -99,8 +101,16 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="ParserTest" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="ParserTest" />
+      <module name="MiniCompiler.main" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.ParserTest" />
         <item itemvalue="Application.Parser" />
         <item itemvalue="Application.Lexer" />
       </list>
@@ -154,6 +164,19 @@
     <option name="LAST_COMMIT_MESSAGE" value="New commit with added getNextToken() code" />
   </component>
   <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-method">
+          <url>file://$PROJECT_DIR$/src/main/java/Parser.java</url>
+          <line>378</line>
+          <properties class="Parser" method="stmt">
+            <option name="EMULATED" value="true" />
+            <option name="WATCH_EXIT" value="false" />
+          </properties>
+          <option name="timeStamp" value="13" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
     <pin-to-top-manager>
       <pinned-members>
         <PinnedItemInfo parentTag="Lexer" memberName="position" />
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'java'\n}\n\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'\n}\n\ntest {\n    useJUnitPlatform()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 07e3666239ca971a7fee496b8a4da803abaf4232)
+++ b/build.gradle	(date 1715051036116)
@@ -10,6 +10,7 @@
 }
 
 dependencies {
+    implementation 'org.testng:testng:7.1.0'
     testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
     testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
 }
